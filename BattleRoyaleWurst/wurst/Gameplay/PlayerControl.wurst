package PlayerControl

import initlater Gameplay
import Inventory
import ClosureTimers
import Barrel
import LinkedList

constant HERO_MK = 'H002'
constant HERO_TC = 'H018'
constant HERO_CL = 'H019'
constant HERO_WD = 'H01A'

public unit array playerHero
public unit array hotkeyHero1
public unit array hotkeyHero2
public unit array hotkeyHero3

public fogmodifier array mapVision

int playerCount = 0
public group playerHeroes = CreateGroup()

public force playerGroup = CreateForce()
public force observerGroup = CreateForce()

public enum PlayerState
    EMPTY
    LEFT
    ALIVE
    DEAD

public function PlayerState.toString() returns string
    if this == PlayerState.EMPTY
        return "empty"
    else if this == PlayerState.LEFT
        return "left"
    else if this == PlayerState.ALIVE
        return "alive"
    else if this == PlayerState.DEAD
        return "dead"
    else
        return "unnkown"

public PlayerState array playerState

public unit blightDummy

real array startX
real array startY
int maxLocations = 0
int totalLocations = 0

boolean disableSelectionDetection = false

//multiboard
int array rowToPlayer // 1 ... playerCount
int array playerToRow // 0 ... (playerCount - 1)

multiboard scoreBoardBig
multiboard scoreBoardSmall

int array scoreDeaths
int array scoreHeroKills
int array scoreBossKills
int array scoreUnitKills

int array scoreSurvivedTime
int array scoreScore

public function createHeroes()
    player indexPlayer
    int locI
    real temp

    for i = 0 to bj_MAX_PLAYERS-1
        indexPlayer = Player(i)
        if playerState[i] != PlayerState.EMPTY and playerState[i] != PlayerState.LEFT //only players who are still playing
            playerState[i] = PlayerState.ALIVE
            playerGroup.addPlayer(indexPlayer)
            observerGroup.removePlayer(indexPlayer)

            locI = GetRandomInt(0, maxLocations - 1)

            if GetLocalPlayer() == indexPlayer
                PanCameraToTimed(startX[locI], startY[locI], 0)
            
            int heroId = HERO_MK
            if GetPlayerRace(indexPlayer) == RACE_ORC
                heroId = HERO_TC
            else if GetPlayerRace(indexPlayer) == RACE_UNDEAD
                heroId = HERO_CL
            else if GetPlayerRace(indexPlayer) == RACE_NIGHTELF
                heroId = HERO_WD

            playerHero[i] = CreateUnit(indexPlayer, heroId, startX[locI], startY[locI], GetRandomReal(0,360))
            hotkeyHero1[i] = CreateUnit(indexPlayer, 'H00N', startX[locI], startY[locI], 0)
                ..pause()
            hotkeyHero2[i] = CreateUnit(indexPlayer, 'H00P', startX[locI], startY[locI], 0)
                ..pause()
            hotkeyHero3[i] = CreateUnit(indexPlayer, 'H00R', startX[locI], startY[locI], 0)
                ..pause()

            UnitModifySkillPoints(playerHero[i], - 1)

            new Inventory(playerHero[i])

            playerHeroes.addUnit(playerHero[i])
            playerHero[i].pause()

            temp = startX[locI]
            startX[locI] = startX[maxLocations-1]
            startX[maxLocations-1] = temp

            temp = startY[locI]
            startY[locI] = startY[maxLocations-1]
            startY[maxLocations-1] = temp

            maxLocations--
        
        else
            
            playerHero[i] = null
            hotkeyHero1[i] = null
            hotkeyHero2[i] = null
            hotkeyHero3[i] = null

    maxLocations = totalLocations

function setupHeroes()
    group g = CreateGroup()
    maxLocations = 0
    GroupEnumUnitsOfPlayer(g, Player(PLAYER_NEUTRAL_PASSIVE) , null)
    for unit u in g
        if u.getTypeId() == 'h00L'
            startX[maxLocations] = R2I(GetUnitX(u))+0.5
            startY[maxLocations] = R2I(GetUnitY(u))+0.5
            maxLocations = maxLocations + 1
            u.remove()

    totalLocations = maxLocations

    g.destr()

public function initPlayers()
    player indexPlayer
    for i = 0 to bj_MAX_PLAYERS-1
        indexPlayer = Player(i)
        if GetPlayerSlotState(indexPlayer) == PLAYER_SLOT_STATE_EMPTY
            playerState[i] = PlayerState.EMPTY
        else
            if GetPlayerSlotState(indexPlayer) == PLAYER_SLOT_STATE_LEFT
                playerState[i] = PlayerState.LEFT
            else
                playerState[i] = PlayerState.ALIVE
                playerCount++
                rowToPlayer[playerCount] = i
                playerToRow[i] = playerCount

function onLeave()
    let p = GetTriggerPlayer()
    let pId = p.getId()

    playerHero[pId].kill() // will trigger OnDeath
    playerState[pId] = PlayerState.LEFT

function onDeath()

    let u = GetTriggerUnit()
    
    if playerHeroes.contains(u) // hero kill
        let p = GetTriggerPlayer()
        let pId = p.getId()
        let k = GetKillingUnit()
        int killer

        if k!= null
            killer = k.getOwner().getId()
        else
            killer = -1

        playerState[pId] = PlayerState.DEAD

        Inventory.getInventory(u).dropAllItems()

        if killer == PLAYER_NEUTRAL_AGGRESSIVE
            if GetUnitLevel(k) == 10
                printTimed( p.getNameColored()+" was killed by "+k.getName(), 5)
            else
                printTimed(p.getNameColored()+" was killed by a "+k.getName(), 5)
        else if killer >= 0 and killer < PLAYER_NEUTRAL_AGGRESSIVE
            printTimed(p.getName()+" was killed by "+Player(killer).getNameColored(), 5)
        else
            if k == blightDummy
                printTimed(p.getNameColored()+" was killed by Blight.", 5)
            else
                printTimed(p.getNameColored()+" has died.", 5)

        if killer >= PLAYER_NEUTRAL_AGGRESSIVE
            killer = -1

        scoreHeroKill(killer, pId)
        FogModifierStart(mapVision[pId])
        playerGroup.removePlayer(p)
        observerGroup.addPlayer(p)
        playerHeroes.removeUnit(u)

        hotkeyHero1[pId].kill()
        hotkeyHero2[pId].kill()
        hotkeyHero3[pId].kill()

        var ret = false

        for i = 0 to bj_MAX_PLAYERS-1

            if playerState[i] == PlayerState.ALIVE
                if ret
                    return
                ret = true

        roundOver()

    else
        if u.getOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE)
            int killer = GetKillingUnit().getOwner().getId()
            if killer >= bj_MAX_PLAYERS
                return
            if GetUnitLevel(u) == 10
                scoreBossKill(killer)

                if mapLoading
                    return
            
                for i = 0 to 10
                    let drop = BARREL_DROPS.getRandom()
                
                    if drop == null
                        return
                
                    drop.getItem().createWorldItem(u.getPos(), GetRandomInt(drop.getMinCount(), drop.getMaxCount()))
            else
                scoreUnitKill(killer)
        
function getPlayerIdColorString(int pId) returns string
    return Player(pId).getColor().toColor().toColorString()

function seconds2Time(int time) returns string
    int remainingTime
    int hours
    int minutes
    int seconds
    string output = ""

    remainingTime = time
    hours = (remainingTime/3600).toInt()
    remainingTime = remainingTime - 3600*hours
    minutes = (remainingTime/60).toInt()
    remainingTime = remainingTime -60*minutes
    seconds = remainingTime
    if(hours!=0)
        output = output + I2S(hours)+":"
        if(minutes>9)
            output = output + I2S(minutes)+":"
            if(seconds>9)
                output = output + I2S(seconds)
            else
                output = output + "0" + I2S(seconds)

        else
            output = output + "0" + I2S(minutes)+":"
            if(seconds>9) 
                output = output + I2S(seconds)
            else
                output = output + "0" + I2S(seconds)
            
        
    else if(minutes!=0) 
        output = output + I2S(minutes)+":"
        if(seconds>9) 
            output = output + I2S(seconds)
        else
            output = output + "0" + I2S(seconds)
        
    else
        output = output + I2S(seconds)
    
    
    return output

function updateBoard()

    multiboarditem mbitem
    for i = 1 to playerCount
        
        mbitem = MultiboardGetItem(scoreBoardBig, i, 0)
        MultiboardSetItemValue(mbitem, getPlayerIdColorString(rowToPlayer[i])+i.toString()+". "+ Player(rowToPlayer[i]).getName()+"|r")
        MultiboardReleaseItem(mbitem)
        
        mbitem = MultiboardGetItem(scoreBoardSmall, i, 0)
        MultiboardSetItemValue(mbitem, getPlayerIdColorString(rowToPlayer[i])+i.toString()+". "+ Player(rowToPlayer[i]).getName()+"|r")
        MultiboardReleaseItem(mbitem)
        
        mbitem = MultiboardGetItem(scoreBoardBig, i, 1)
        MultiboardSetItemValue(mbitem, playerState[rowToPlayer[i]].toString() )
        MultiboardReleaseItem(mbitem)
        
        mbitem = MultiboardGetItem(scoreBoardBig, i, 2)
        MultiboardSetItemValue(mbitem, I2S(scoreUnitKills[rowToPlayer[i]]))
        MultiboardReleaseItem(mbitem)
        
        mbitem = MultiboardGetItem(scoreBoardBig, i, 3)
        MultiboardSetItemValue(mbitem, I2S(scoreBossKills[rowToPlayer[i]]))
        MultiboardReleaseItem(mbitem)
        
        mbitem = MultiboardGetItem(scoreBoardBig, i, 4)
        MultiboardSetItemValue(mbitem, I2S(scoreHeroKills[rowToPlayer[i]]))
        MultiboardReleaseItem(mbitem)
        
        mbitem = MultiboardGetItem(scoreBoardBig, i, 5)
        MultiboardSetItemValue(mbitem, seconds2Time(scoreSurvivedTime[rowToPlayer[i]]))
        MultiboardReleaseItem(mbitem)
        
        mbitem = MultiboardGetItem(scoreBoardBig, i, 6)
        MultiboardSetItemValue(mbitem, I2S(scoreScore[rowToPlayer[i]]))
        MultiboardReleaseItem(mbitem)
        
        mbitem = MultiboardGetItem(scoreBoardSmall, i, 1)
        MultiboardSetItemValue(mbitem, I2S(scoreScore[rowToPlayer[i]]))
        MultiboardReleaseItem(mbitem)
        

function updateScore(int pId, boolean increase, boolean update)
    int row = playerToRow[pId]
    int nextRow
    if increase
        while true
            nextRow = row - 1
            if nextRow < 1 or scoreScore[rowToPlayer[nextRow]] >= scoreScore[pId]
                break

            rowToPlayer[row] = rowToPlayer[nextRow]
            rowToPlayer[nextRow] = pId

            playerToRow[rowToPlayer[row]] = row
            playerToRow[pId] = nextRow

            row = nextRow
    else
        while true
            nextRow = row + 1
            if nextRow > playerCount or scoreScore[rowToPlayer[nextRow]] <= scoreScore[rowToPlayer[row]]
                break

            rowToPlayer[row] = rowToPlayer[nextRow]
            rowToPlayer[nextRow] = pId

            playerToRow[rowToPlayer[row]] = row
            playerToRow[pId] = nextRow

            row = nextRow

    if update
        updateBoard()

function scoreHeroKill(int killer, int victim)
    scoreDeaths[victim]++
    if killer == victim or killer == -1
        return

    scoreHeroKills[killer]++
    scoreScore[killer] += 100
    updateScore(killer, true, true)

function scoreBossKill(int killer)
    scoreBossKills[killer]++
    scoreScore[killer] += 50
    updateScore(killer, true, true)

function scoreUnitKill(int killer)
    scoreUnitKills[killer]++
    scoreScore[killer] += 5
    updateScore(killer, true, true)

function initMultiboard()
    multiboarditem mbitem

    scoreBoardBig = CreateMultiboard()
        ..setRowCount(playerCount+1)
        ..setColumnCount(7)
        ..setTitle("Score")
    MultiboardSetItemStyleBJ( scoreBoardBig, 0, 0, true, false )

    MultiboardSetItemWidthBJ(scoreBoardBig,1,0,8)
    MultiboardSetItemWidthBJ(scoreBoardBig,2,0,4)
    MultiboardSetItemWidthBJ(scoreBoardBig,3,0,2)
    MultiboardSetItemWidthBJ(scoreBoardBig,4,0,2)
    MultiboardSetItemWidthBJ(scoreBoardBig,5,0,2)
    MultiboardSetItemWidthBJ(scoreBoardBig,6,0,4)
    MultiboardSetItemWidthBJ(scoreBoardBig,7,0,3)

    mbitem = MultiboardGetItem(scoreBoardBig, 0, 0)
    MultiboardSetItemValue(mbitem, "Player")
    MultiboardReleaseItem(mbitem)

    mbitem = MultiboardGetItem(scoreBoardBig, 0, 1)
    MultiboardSetItemValue(mbitem, "Status")
    MultiboardReleaseItem(mbitem)
    
    mbitem = MultiboardGetItem(scoreBoardBig, 0, 2)
    MultiboardSetItemValue(mbitem, "U")
    MultiboardSetItemStyle(mbitem, false, true)
    MultiboardSetItemIcon(mbitem,"ReplaceableTextures\\CommandButtons\\BTNSteelMelee.blp")
    MultiboardReleaseItem(mbitem)
    
    mbitem = MultiboardGetItem(scoreBoardBig, 0, 3)
    MultiboardSetItemValue(mbitem, "B")
    MultiboardSetItemStyle(mbitem, false, true)
    MultiboardSetItemIcon(mbitem,"ReplaceableTextures\\CommandButtons\\BTNBash.blp")
    MultiboardReleaseItem(mbitem)
    
    mbitem = MultiboardGetItem(scoreBoardBig, 0, 4)
    MultiboardSetItemValue(mbitem, "H")
    MultiboardSetItemStyle(mbitem, false, true)
    MultiboardSetItemIcon(mbitem,"ReplaceableTextures\\CommandButtons\\BTNStormBolt.blp")
    MultiboardReleaseItem(mbitem)
    
    mbitem = MultiboardGetItem(scoreBoardBig, 0, 5)
    MultiboardSetItemValue(mbitem, "T")
    MultiboardSetItemStyle(mbitem, false, true)
    MultiboardSetItemIcon(mbitem,"ReplaceableTextures\\CommandButtons\\BTNEngineeringUpgrade.blp")
    MultiboardReleaseItem(mbitem)
    
    mbitem = MultiboardGetItem(scoreBoardBig, 0, 6)
    MultiboardSetItemValue(mbitem, "S")
    MultiboardSetItemStyle(mbitem, false, true)
    MultiboardSetItemIcon(mbitem,"ReplaceableTextures\\CommandButtons\\BTNChestOfGold.blp")
    MultiboardReleaseItem(mbitem)

    scoreBoardSmall = CreateMultiboard()
    ..setRowCount(playerCount+1)
    ..setColumnCount(2)
    ..setTitle("Score")
    MultiboardSetItemStyleBJ( scoreBoardSmall, 0, 0, true, false )

    MultiboardSetItemWidthBJ(scoreBoardSmall,1,0,8)
    MultiboardSetItemWidthBJ(scoreBoardSmall,2,0,4)
    
    mbitem = MultiboardGetItem(scoreBoardSmall, 0, 0)
    MultiboardSetItemValue(mbitem, "Player")
    MultiboardReleaseItem(mbitem)
    
    
    mbitem = MultiboardGetItem(scoreBoardSmall, 0, 1)
    MultiboardSetItemValue(mbitem, "Score")
    MultiboardSetItemStyle(mbitem, true, false)
    MultiboardReleaseItem(mbitem)
    
    MultiboardDisplay(scoreBoardSmall, false)
    
    MultiboardDisplay(scoreBoardBig, true)
    
    MultiboardMinimize(scoreBoardBig, true)
    updateBoard()
    doAfter(0, () -> MultiboardMinimize(scoreBoardBig, false))
    

    

function periodicScoreUpdate()
    /*
    for i = 0 to bj_MAX_PLAYERS-1
        if playerState[i] == PlayerState.ALIVE
            if playerHero[i]!= null
                if not playerHero[i].isPaused()
                    scoreSurvivedTime[i]++
                    scoreScore[i]++
                    updateScore(i, true, false)
    updateBoard()*/

    //update the multiboard from top to bottom
    let list = new LinkedList<int>
    for i = 1 to playerCount
        let pId = rowToPlayer[i]
        if playerState[pId] == PlayerState.ALIVE
            if playerHero[pId]!= null
                if not playerHero[pId].isPaused()
                    list.add(pId)

    for int i in list        
        scoreSurvivedTime[i]++
        scoreScore[i]++
        updateScore(i, true, false)

    destroy list
    updateBoard()


function moveHotkeyHeroes()
    for i = 0 to bj_MAX_PLAYERS-1
        if playerHero[i] != null
            let pos = playerHero[i].getPos()
            hotkeyHero1[i].setXY(pos)
            hotkeyHero2[i].setXY(pos)
            hotkeyHero3[i].setXY(pos)


function onSelection()
    if disableSelectionDetection
        return

    let pId = GetTriggerPlayer().getId()
    let selected = GetTriggerUnit()
    let pHero = playerHero[pId]

    if pHero == null
        return

    if selected == hotkeyHero1[pId]
        Inventory.getInventory(pHero).changePage(0)
        disableSelectionDetection = true
        if GetLocalPlayer() == Player(pId)
            ClearSelection()
            SelectUnit(pHero, true)
        disableSelectionDetection = false
    else if selected == hotkeyHero2[pId]
        Inventory.getInventory(pHero).changePage(1)
        disableSelectionDetection = true
        if GetLocalPlayer() == Player(pId)
            ClearSelection()
            SelectUnit(pHero, true)
        disableSelectionDetection = false
    else if selected == hotkeyHero3[pId]
        Inventory.getInventory(pHero).changePage(2)
        disableSelectionDetection = true
        if GetLocalPlayer() == Player(pId)
            ClearSelection()
            SelectUnit(pHero, true)
        disableSelectionDetection = false




function setupPlayers()
    trigger trg = CreateTrigger()
    player indexPlayer
    for i = 0 to bj_MAX_PLAYERS-1
        indexPlayer = Player(i)
        trg.registerPlayerEvent(indexPlayer, EVENT_PLAYER_LEAVE)
        
    trg.addAction(function onLeave)

    CreateTrigger()
        ..addAction(function onDeath)
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)

function setupTeams()
    for i = 0 to bj_MAX_PLAYERS-2
        let sourcePlayer = Player(i)
        SetPlayerHandicap(sourcePlayer, 1)
        SetPlayerAlliance(players[23], sourcePlayer, ALLIANCE_SHARED_VISION, true)
        for j = 0 to bj_MAX_PLAYERS-1
            if i != j
                //ffa, everone us enemy to everyone
                let otherPlayer = Player(j)
                SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_PASSIVE,       false)
                SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_HELP_REQUEST,  false)
                SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_HELP_RESPONSE, false)
                SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_XP,     false)
                SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_SPELLS, false)
                SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_VISION, false)
                SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_CONTROL, false)
                SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_ADVANCED_CONTROL, false)

init
    setupTeams()
    setupPlayers()
    setupHeroes()
    CreateTrigger()
        ..addAction(function moveHotkeyHeroes)
        ..registerTimerEvent(0.25, true)
    CreateTrigger()
        ..addAction(function onSelection)
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SELECTED)

    doAfter(0, () -> initMultiboard() )

    CreateTrigger()
        ..addAction(function periodicScoreUpdate)
        ..registerTimerEvent(1, true)

    rowToPlayer[0] = 0
    for i = 0 to bj_MAX_PLAYERS-1
        scoreBossKills[i] = 0
        scoreHeroKills[i] = 0
        scoreUnitKills[i] = 0
        scoreScore[i] = 0
        scoreSurvivedTime[i] = 0
        scoreDeaths[i] = 0
        playerToRow[i] = 0
        rowToPlayer[i+1] = i