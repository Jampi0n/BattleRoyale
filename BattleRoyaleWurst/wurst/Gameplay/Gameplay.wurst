package Gameplay

import DestructibleReset
import UnitReset
import TerrainReset
import PlayerControl
import Circle
import ClosureTimers
import Inventory
import SoundUtils

boolean firstRound = true
public boolean mapLoading


constant SOUND_ROUND_START = new SoundDefinition(Sounds.gameFound, false, false)
constant SOUND_ROUND_END = new SoundDefinition(Sounds.goodJob, false, false)


function loadMapState()
    mapLoading = true
    loadAllTerrain()
    loadAllUnits()
    loadAllDestructibles()

    EnumItemsInRect(bj_mapInitialPlayableArea, null, () -> ( GetEnumItem().remove() ) )

    mapLoading = false

function saveMapState()
    saveAllTerrain()
    saveAllUnits()
    saveAllDestructibles()

//runs at the beginning of the map (0 seconds)
function gameStarts()
    //print("gameplay.gameStarts")

    saveMapState()

    TimerDialogSetTitle(windowCircleMove, "Circle moves in:")
    TimerDialogSetTitle(windowCircleMessage, "Next circle position in:")
    TimerDialogSetTitle(windowRoundStart, "Round starts in:")
    TimerDialogSetTitle(windowRoundEnd, "Round ends in:")

//runs at the beginning of each round (5 seconds)
function roundBegins()
    timerRoundStart.pause()
    //print("gameplay.gameRoundBegins")
    SOUND_ROUND_START.play().snd.setVolume(60)
    print("|cffffcc00Let the Battle begin!|r")

    TimerDialogDisplay(windowRoundStart, false)
    TimerDialogDisplay(windowCircleMessage, true)

    timerCircleMessage.start(ROUND_MESSAGE_DELAY, function onTimerMessage)

    ForGroup(playerHeroes, () -> GetEnumUnit().unpause())

//runs at the beginning of each round (0 seconds, after MapLoad)
function roundStarts()
    real time
    if firstRound
        gameStarts()
        time = 8
        firstRound = false
    else
        time = 8 //can be increased, if loading takes too long

    //print("gameplay.roundStarts")

    initCircle()
    createHeroes()

    timerRoundStart.start(time, function roundBegins)
    TimerDialogDisplay(windowRoundStart , true)
    TimerDialogDisplay(windowRoundEnd , false)
    TimerDialogDisplay(windowCircleMove , false)
    TimerDialogDisplay(windowCircleMessage , false)

    FogEnable( true )
    CinematicFadeBJ( bj_CINEFADETYPE_FADEIN, 1, "ReplaceableTextures\\CameraMasks\\White_mask.blp", 0, 0, 0, 0 )
    doAfter(1) ->
        CinematicModeExBJ(false, bj_FORCE_ALL_PLAYERS, 1)
    doAfter(2) ->
        EnableUserControl(true)

//runs at the beginning of each round (instant)
function roundInit()
    //print("Gameplay.roundInit")
    EnableUserControl(false)
    FogMaskEnable(false)
    FogEnable(false)
    real time
    if not firstRound
        time = 2
        loadMapState()
    else
        time = 2

    doAfter(time, () -> roundStarts())

public function roundEnds()
    //print("Gameplay.roundEnds")

    ClearTextMessages()

    for i = 0 to bj_MAX_PLAYERS-1
        FogModifierStop(mapVision[i])

        if playerHero[i] != null
            destroy Inventory.getInventory(playerHero[i])
            playerHero[i].remove()

        hotkeyHero1[i].remove()
        hotkeyHero2[i].remove()
        hotkeyHero3[i].remove()

    TimerDialogDisplay(windowRoundEnd, false)
    timerCircleMessage.pause()
    timerCircleMove.pause()
    timerRoundEnd.pause()
    timerRoundStart.pause()

    circleStopMoving()
    circleClear()

    CinematicFadeBJ( bj_CINEFADETYPE_FADEOUT, 2, "ReplaceableTextures\\CameraMasks\\White_mask.blp", 0, 0, 0, 0 )
    CinematicModeExBJ(true, bj_FORCE_ALL_PLAYERS, 2)
    doAfter(2, () -> roundInit() )

//last hero died
public function roundOver(int playerId)

    int reward = 100

    timerCircleMessage.pause()
    timerCircleMove.pause()
    timerRoundStart.pause()

    timerRoundEnd.start(5, function roundEnds)

    print("|cffffcc00"+players[playerId].getName()+" is the last remainign hero and gets "+reward.toString()+" points!|r")
    scoreAddScore(playerId, reward)
    SOUND_ROUND_END.play()

    TimerDialogDisplay(windowRoundEnd , true)
    TimerDialogDisplay(windowCircleMove , false)
    TimerDialogDisplay(windowCircleMessage , false)


//runs after SaveMapStatus
function mapConfig()
    for i = 0 to bj_MAX_PLAYERS-1
        mapVision[i] = CreateFogModifierRect(Player(i), FOG_OF_WAR_VISIBLE, bj_mapInitialPlayableArea, true, false)

    initPlayers()
    blightDummy = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'h00S', 0, 0, 0)

//runs at the beginning of the map (loadingscreen)
function onMapInit()
    CinematicModeExBJ(true, bj_FORCE_ALL_PLAYERS, 0)
    CinematicFadeBJ(bj_CINEFADETYPE_FADEOUT, 0, "ReplaceableTextures\\CameraMasks\\White_mask.blp", 0, 0, 0, 0)
    group g = CreateGroup()
    SetCreepCampFilterState( false )
    SetAllyColorFilterState(0)
    EnableMinimapFilterButtons( false, false )
    GroupEnumUnitsOfPlayer(g, Player(PLAYER_NEUTRAL_PASSIVE), null)
    for unit u in g
        if u.isType(UNIT_TYPE_STRUCTURE)
            u.removeAbility('Amov')

    g.destr()
    mapConfig()
    roundInit()

init
    onMapInit()