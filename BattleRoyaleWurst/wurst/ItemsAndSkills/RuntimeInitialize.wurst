package RuntimeInitialize

import ItemGeneration
import CompiletimeFinalize
import Execute
import ObjectIds
import HashMap
import SkillObjectIds
import ErrorHandling
import General

int array itemTypeId
int array itemItemType
int array skillAbilityTypeId
boolean array skillInstant
int array skillToItemId
real array skillCooldown

int forCounter
int stringPos = 0
string stringArray = ""
string currentString = ""
int stringLength = 0

public interface OnSkillCast
    function cast(unit caster, unit target, vec2 targetPos)

public function int.attachCode(OnSkillCast onCast)
    Skill.convertId(this).setOnCast(onCast)

public class Skill

    private int skillId
    private int array[4] abilities
    private Item assocItem
    private boolean instant
    protected static constant idMap = new HashMap<int, Skill>()
    protected static constant typeIdMap = new HashMap<int, Skill>()
    protected static constant hotkeyMap = new HashMap<int, int>()

    private real cooldown

    private static constant onCastTrigger = CreateTrigger()
    private OnSkillCast onCastFunction

    static function classInit()
        onCastTrigger
            ..addAction(function onCastStatic)
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT)

    construct(int skillId)
        this.cooldown = skillCooldown[skillId]
        this.instant = skillInstant[skillId]
        //======================
        //  connects classes, ids and typeIds
        //======================
        this.skillId = skillId
        idMap.put(skillId, this)

        typeIdMap.put(skillAbilityTypeId[skillId], this)
        typeIdMap.put(skillAbilityTypeId[skillId]+1, this)
        typeIdMap.put(skillAbilityTypeId[skillId]+2, this)
        typeIdMap.put(skillAbilityTypeId[skillId]+3, this)

        this.abilities[0] = skillAbilityTypeId[skillId]
        this.abilities[1] = skillAbilityTypeId[skillId]+1
        this.abilities[2] = skillAbilityTypeId[skillId]+2
        this.abilities[3] = skillAbilityTypeId[skillId]+3

        hotkeyMap.put(skillAbilityTypeId[skillId], 0)
        hotkeyMap.put(skillAbilityTypeId[skillId]+1, 1)
        hotkeyMap.put(skillAbilityTypeId[skillId]+2, 2)
        hotkeyMap.put(skillAbilityTypeId[skillId]+3, 3)

        this.assocItem = Item.convertId(skillToItemId[skillId])
        this.assocItem.assocSkill = this

        debugPrint((this.getId()).toString()+" -> "+(this.assocItem.getId()).toString())


        //======================

    static function onCastStatic()
        if not Skill.hasTypeId(GetSpellAbilityId())
            return
        Skill castedSkill = convertTypeId(GetSpellAbilityId())

        castedSkill.onCastFunction.cast(GetTriggerUnit(), GetSpellTargetUnit(), vec2(GetSpellTargetX(), GetSpellTargetY()) )

    static function hasId(int id) returns boolean
        return idMap.has(id)

    static function hasTypeId(int typeId) returns boolean
        return typeIdMap.has(typeId)

    static function convertId(int id) returns Skill
        if hasId(id)
            return idMap.get(id)
        else
            error("Skill.convertId == null")
            return null

    static function convertTypeId(int typeId) returns Skill
        if hasTypeId(typeId)
            return typeIdMap.get(typeId)
        else
            error("Skill.convertTypeId == null")
            return null

    function setOnCast(OnSkillCast onCast)
        this.onCastFunction = onCast


    function getId() returns int
        return this.skillId

    function getTypeId() returns int
        debugPrint("here?")
        return this.abilities[0]

    static function getHotkey(int abilityTypeId) returns int
        return hotkeyMap.get(abilityTypeId)

    function getItem() returns Item
        return this.assocItem

    function getCooldown() returns real
        return this.cooldown

    function isInstant() returns boolean
        return this.instant


public class Item

    private int itemId
    private int worldItem
    private int inventoryItem
    private ItemType itemType
    private static constant itemChargesMap = new HashMap<item, int>()
    protected Skill assocSkill //only if itemType==ItemType.Skill
    protected static constant idMap = new HashMap<int, Item>()
    protected static constant typeIdMap = new HashMap<int, Item>()

    construct(int itemId)
        //======================
        //  connects classes, ids and typeIds
        //======================
        this.itemId = itemId
        idMap.put(itemId, this)

        this.worldItem = itemTypeId[itemId]
        this.inventoryItem = itemTypeId[itemId]+1

        typeIdMap.put(itemTypeId[itemId], this)
        typeIdMap.put(itemTypeId[itemId]+1, this)


        this.assocSkill = null

        if itemItemType[itemId] == 0
            this.itemType = ItemType.Skill
        else if itemItemType[itemId] == 1
            this.itemType = ItemType.Usable
        else if itemItemType[itemId] == 2
            this.itemType = ItemType.Permanent 
        //======================

    static function hasId(int id) returns boolean
        return idMap.has(id)

    static function hasTypeId(int typeId) returns boolean
        return typeIdMap.has(typeId)

    static function convertId(int id) returns Item
        if hasId(id)
            return idMap.get(id)
        else
            error("Item.convertId == null")
            return null
            

    static function convertTypeId(int typeId) returns Item
        if hasTypeId(typeId)
            return typeIdMap.get(typeId)
        else
            error("Item.convertTypeId == null")
            return null

    function getId() returns int
        return this.itemId

    function getWorldItem() returns int
        return this.worldItem

    function getInventoryItem() returns int
        return this.inventoryItem  
        
    function createWorldItem(vec2 pos, int charges) returns item
        debugPrint("create world item")
        let itm = createItem(worldItem, pos)
        itemChargesMap.put(itm, charges)
        return itm

    function getSkill() returns Skill
        if this.assocSkill!=null
            debugPrint((this.getId()).toString()+" -> "+(this.assocSkill.getId()).toString())
        else
            debugPrint((this.getId()).toString()+" -> "+"null")
        return this.assocSkill

    static function getItemCharges(item itm) returns int
        return itemChargesMap.get(itm)

    static function setItemCharges(item itm, int charges)
        itemChargesMap.put(itm, charges)

function createClassObjects()
    debugPrint(itemIdCount.toString())
    debugPrint(skillIdCount.toString())

    for i = 0 to itemIdCount-1
        new Item(i)

    for i = 0 to skillIdCount-1
        new Skill(i)

init
    Skill.classInit()

    forCounter = 0
    stringPos = 0
    stringArray = stringItemTypeIds
    currentString = ""
    stringLength = stringArray.length()
    executeWhile(10, () -> (stringPos < stringLength) , () -> (begin
        string currentString = stringArray.substring(stringPos, stringPos+3)
        itemTypeId[forCounter] = fourchar2int("I"+currentString)

        stringPos += 3
        forCounter++
    end))

    forCounter = 0
    stringPos = 0
    stringArray = stringItemItemTypes
    currentString = ""
    stringLength = stringArray.length()
    executeWhile(20, () -> (stringPos < stringLength) , () -> (begin
        string currentString = stringArray.charAt(stringPos)
        itemItemType[forCounter] = currentString.toInt()

        stringPos++
        forCounter++
    end))

    forCounter = 0
    stringPos = 0
    stringArray = stringAbilityTypeIds
    currentString = ""
    stringLength = stringArray.length()
    executeWhile(10, () -> (stringPos < stringLength) , () -> (begin
        string currentString = stringArray.substring(stringPos, stringPos+3)
        skillAbilityTypeId[forCounter] = fourchar2int("A"+currentString)

        stringPos += 3
        forCounter++
    end))

    forCounter = 0
    stringPos = 0
    stringArray = stringAbilityItemIds
    currentString = ""
    stringLength = stringArray.length()
    executeWhile(20, ()->(stringPos < stringLength), () -> (begin
        currentString = ""
        while stringArray.charAt(stringPos) != "|" and stringPos < stringArray.length()
            currentString += stringArray.charAt(stringPos)
            stringPos ++

        skillToItemId[forCounter] = currentString.toInt()
        stringPos++
        forCounter++
    end))

    forCounter = 0
    stringPos = 0
    stringArray = stringAbilityCooldowns
    currentString = ""
    stringLength = stringArray.length()
    executeWhile(20, ()->(stringPos < stringLength), () -> (begin
        currentString = ""
        while stringArray.charAt(stringPos) != "|" and stringPos < stringArray.length()
            currentString += stringArray.charAt(stringPos)
            stringPos ++

        skillCooldown[forCounter] = currentString.toReal()
        stringPos++
        forCounter++
    end))

    forCounter = 0
    stringPos = 0
    stringArray = stringAbilityInstant
    currentString = ""
    stringLength = stringArray.length()
    executeWhile(20, () -> (stringPos < stringLength) , () -> (begin
        string currentString = stringArray.charAt(stringPos)
        skillInstant[forCounter] = (currentString=="1")

        stringPos++
        forCounter++
    end))

    debugPrint(stringAbilityItemIds)
    debugPrint(stringAbilityTypeIds)
    debugPrint(stringItemItemTypes)
    debugPrint(stringItemTypeIds)

    execute(() -> (createClassObjects() ) )

    execute(() -> (setupAllSkills() ) )